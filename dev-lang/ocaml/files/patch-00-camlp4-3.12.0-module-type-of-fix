Index: camlp4/Camlp4Parsers/Camlp4OCamlRevisedParser.ml
===================================================================
--- camlp4/Camlp4Parsers/Camlp4OCamlRevisedParser.ml	(revision 10933)
+++ camlp4/Camlp4Parsers/Camlp4OCamlRevisedParser.ml	(revision 10934)
@@ -520,7 +520,8 @@
         | `QUOTATION x -> Quotation.expand _loc x Quotation.DynAst.module_type_tag
         | i = module_longident_with_app -> <:module_type< $id:i$ >>
         | "'"; i = a_ident -> <:module_type< ' $i$ >>
-        | "("; mt = SELF; ")" -> <:module_type< $mt$ >> ] ]
+        | "("; mt = SELF; ")" -> <:module_type< $mt$ >>
+        | "module"; "type"; "of"; me = module_expr -> <:module_type< module type of $me$ >> ] ]
     ;
     sig_item:
       [ "top"
Index: camlp4/Camlp4/Struct/Camlp4Ast2OCamlAst.ml
===================================================================
--- camlp4/Camlp4/Struct/Camlp4Ast2OCamlAst.ml	(revision 10933)
+++ camlp4/Camlp4/Struct/Camlp4Ast2OCamlAst.ml	(revision 10934)
@@ -856,6 +856,8 @@
         mkmty loc (Pmty_signature (sig_item sl []))
     | <:module_type@loc< $mt$ with $wc$ >> ->
         mkmty loc (Pmty_with (module_type mt) (mkwithc wc []))
+    | <:module_type@loc< module type of $me$ >> ->
+        mkmty loc (Pmty_typeof (module_expr me))
     | <:module_type< $anti:_$ >> -> assert False ]
   and sig_item s l =
     match s with
Index: camlp4/Camlp4/Camlp4Ast.partial.ml
===================================================================
--- camlp4/Camlp4/Camlp4Ast.partial.ml	(revision 10933)
+++ camlp4/Camlp4/Camlp4Ast.partial.ml	(revision 10934)
@@ -197,6 +197,8 @@
     | MtSig of loc and sig_item
       (* mt with wc *)
     | MtWit of loc and module_type and with_constr
+      (* module type of m *)
+    | MtOf of loc and module_expr
     | MtAnt of loc and string (* $s$ *) ]
   and sig_item =
     [ SgNil of loc
Index: camlp4/Camlp4/Printers/OCaml.ml
===================================================================
--- camlp4/Camlp4/Printers/OCaml.ml	(revision 10933)
+++ camlp4/Camlp4/Printers/OCaml.ml	(revision 10934)
@@ -877,6 +877,7 @@
     let () = o#node f mt Ast.loc_of_module_type in
     match mt with
     [ <:module_type<>> -> assert False
+    | <:module_type< module type of $me$ >> -> pp f "@[<2>module type of@ %a@]" o#module_expr me
     | <:module_type< $id:i$ >> -> o#ident f i
     | <:module_type< $anti:s$ >> -> o#anti f s
     | <:module_type< functor ( $s$ : $mt1$ ) -> $mt2$ >> ->
Index: camlp4/boot/Camlp4Ast.ml
===================================================================
--- camlp4/boot/Camlp4Ast.ml	(revision 10933)
+++ camlp4/boot/Camlp4Ast.ml	(revision 10934)
@@ -1826,6 +1826,14 @@
                 and meta_module_type _loc =
                   fun
                   [ Ast.MtAnt x0 x1 -> Ast.ExAnt x0 x1
+                  | Ast.MtOf x0 x1 ->
+                      Ast.ExApp _loc
+                        (Ast.ExApp _loc
+                           (Ast.ExId _loc
+                              (Ast.IdAcc _loc (Ast.IdUid _loc "Ast")
+                                 (Ast.IdUid _loc "MtOf")))
+                           (meta_loc _loc x0))
+                        (meta_module_expr _loc x1)
                   | Ast.MtWit x0 x1 x2 ->
                       Ast.ExApp _loc
                         (Ast.ExApp _loc
@@ -3894,6 +3902,14 @@
                 and meta_module_type _loc =
                   fun
                   [ Ast.MtAnt x0 x1 -> Ast.PaAnt x0 x1
+                  | Ast.MtOf x0 x1 ->
+                      Ast.PaApp _loc
+                        (Ast.PaApp _loc
+                           (Ast.PaId _loc
+                              (Ast.IdAcc _loc (Ast.IdUid _loc "Ast")
+                                 (Ast.IdUid _loc "MtOf")))
+                           (meta_loc _loc x0))
+                        (meta_module_expr _loc x1)
                   | Ast.MtWit x0 x1 x2 ->
                       Ast.PaApp _loc
                         (Ast.PaApp _loc
@@ -4903,6 +4919,9 @@
               let _x = o#loc _x in
               let _x_i1 = o#module_type _x_i1 in
               let _x_i2 = o#with_constr _x_i2 in MtWit _x _x_i1 _x_i2
+          | MtOf _x _x_i1 ->
+              let _x = o#loc _x in
+              let _x_i1 = o#module_expr _x_i1 in MtOf _x _x_i1
           | MtAnt _x _x_i1 ->
               let _x = o#loc _x in
               let _x_i1 = o#string _x_i1 in MtAnt _x _x_i1 ];
@@ -5678,6 +5697,8 @@
           | MtWit _x _x_i1 _x_i2 ->
               let o = o#loc _x in
               let o = o#module_type _x_i1 in let o = o#with_constr _x_i2 in o
+          | MtOf _x _x_i1 ->
+              let o = o#loc _x in let o = o#module_expr _x_i1 in o
           | MtAnt _x _x_i1 -> let o = o#loc _x in let o = o#string _x_i1 in o ];
         method module_expr : module_expr -> 'self_type =
           fun
Index: camlp4/boot/Camlp4.ml
===================================================================
--- camlp4/boot/Camlp4.ml	(revision 10933)
+++ camlp4/boot/Camlp4.ml	(revision 10934)
@@ -1124,6 +1124,8 @@
           MtSig of loc * sig_item
           | (* mt with wc *)
           MtWit of loc * module_type * with_constr
+          | (* module type of m *)
+          MtOf of loc * module_expr
           | MtAnt of loc * string
           and (* $s$ *)
           sig_item =
@@ -1981,6 +1983,7 @@
           | MtQuo of loc * string
           | MtSig of loc * sig_item
           | MtWit of loc * module_type * with_constr
+          | MtOf of loc * module_expr
           | MtAnt of loc * string
           and sig_item =
           | SgNil of loc
@@ -8999,6 +9002,15 @@
                         and meta_module_type _loc =
                           function
                           | Ast.MtAnt (x0, x1) -> Ast.ExAnt (x0, x1)
+                          | Ast.MtOf (x0, x1) ->
+                              Ast.ExApp (_loc,
+                                (Ast.ExApp (_loc,
+                                   (Ast.ExId (_loc,
+                                      (Ast.IdAcc (_loc,
+                                         (Ast.IdUid (_loc, "Ast")),
+                                         (Ast.IdUid (_loc, "MtOf")))))),
+                                   (meta_loc _loc x0))),
+                                (meta_module_expr _loc x1))
                           | Ast.MtWit (x0, x1, x2) ->
                               Ast.ExApp (_loc,
                                 (Ast.ExApp (_loc,
@@ -11285,6 +11297,15 @@
                         and meta_module_type _loc =
                           function
                           | Ast.MtAnt (x0, x1) -> Ast.PaAnt (x0, x1)
+                          | Ast.MtOf (x0, x1) ->
+                              Ast.PaApp (_loc,
+                                (Ast.PaApp (_loc,
+                                   (Ast.PaId (_loc,
+                                      (Ast.IdAcc (_loc,
+                                         (Ast.IdUid (_loc, "Ast")),
+                                         (Ast.IdUid (_loc, "MtOf")))))),
+                                   (meta_loc _loc x0))),
+                                (meta_module_expr _loc x1))
                           | Ast.MtWit (x0, x1, x2) ->
                               Ast.PaApp (_loc,
                                 (Ast.PaApp (_loc,
@@ -12406,6 +12427,9 @@
                       let _x_i1 = o#module_type _x_i1 in
                       let _x_i2 = o#with_constr _x_i2
                       in MtWit (_x, _x_i1, _x_i2)
+                  | MtOf (_x, _x_i1) ->
+                      let _x = o#loc _x in
+                      let _x_i1 = o#module_expr _x_i1 in MtOf (_x, _x_i1)
                   | MtAnt (_x, _x_i1) ->
                       let _x = o#loc _x in
                       let _x_i1 = o#string _x_i1 in MtAnt (_x, _x_i1)
@@ -13305,6 +13329,8 @@
                       let o = o#loc _x in
                       let o = o#module_type _x_i1 in
                       let o = o#with_constr _x_i2 in o
+                  | MtOf (_x, _x_i1) ->
+                      let o = o#loc _x in let o = o#module_expr _x_i1 in o
                   | MtAnt (_x, _x_i1) ->
                       let o = o#loc _x in let o = o#string _x_i1 in o
                   
@@ -16038,7 +16064,9 @@
                     warning_verbose : bool ref; error_verbose : bool ref
                   }
                 
-                type token_info = { prev_loc : Loc.t; cur_loc : Loc.t }
+                type token_info =
+                  { prev_loc : Loc.t; cur_loc : Loc.t; prev_loc_only : bool
+                  }
                 
                 type token_stream = (Token.t * token_info) Stream.t
                 
@@ -16140,7 +16168,9 @@
                     warning_verbose : bool ref; error_verbose : bool ref
                   }
                 
-                type token_info = { prev_loc : Loc.t; cur_loc : Loc.t }
+                type token_info =
+                  { prev_loc : Loc.t; cur_loc : Loc.t; prev_loc_only : bool
+                  }
                 
                 type token_stream = (Token.t * token_info) Stream.t
                 
@@ -16333,6 +16363,8 @@
           
         module Tools =
           struct
+            let get_prev_loc_only = ref false
+              
             module Make (Structure : Structure.S) =
               struct
                 open Structure
@@ -16353,22 +16385,38 @@
                 let keep_prev_loc strm =
                   match Stream.peek strm with
                   | None -> Stream.sempty
-                  | Some ((_, init_loc)) ->
-                      let rec go prev_loc (__strm : _ Stream.t) =
-                        (match Stream.peek __strm with
-                         | Some ((tok, cur_loc)) ->
-                             (Stream.junk __strm;
-                              let strm = __strm
-                              in
-                                Stream.lcons
-                                  (fun _ ->
-                                     (tok,
-                                      {
-                                        prev_loc = prev_loc;
-                                        cur_loc = cur_loc;
-                                      }))
-                                  (Stream.slazy (fun _ -> go cur_loc strm)))
-                         | _ -> Stream.sempty)
+                  | Some ((tok0, init_loc)) ->
+                      let rec go prev_loc strm1 =
+                        if !get_prev_loc_only
+                        then
+                          Stream.lcons
+                            (fun _ ->
+                               (tok0,
+                                {
+                                  prev_loc = prev_loc;
+                                  cur_loc = prev_loc;
+                                  prev_loc_only = true;
+                                }))
+                            (Stream.slazy (fun _ -> go prev_loc strm1))
+                        else
+                          (let (__strm : _ Stream.t) = strm1
+                           in
+                             match Stream.peek __strm with
+                             | Some ((tok, cur_loc)) ->
+                                 (Stream.junk __strm;
+                                  let strm = __strm
+                                  in
+                                    Stream.lcons
+                                      (fun _ ->
+                                         (tok,
+                                          {
+                                            prev_loc = prev_loc;
+                                            cur_loc = cur_loc;
+                                            prev_loc_only = false;
+                                          }))
+                                      (Stream.slazy
+                                         (fun _ -> go cur_loc strm)))
+                             | _ -> Stream.sempty)
                       in go init_loc strm
                   
                 let drop_prev_loc strm =
@@ -16380,9 +16428,17 @@
                   | None -> Loc.ghost
                   
                 let get_prev_loc strm =
-                  match Stream.peek strm with
-                  | Some ((_, r)) -> r.prev_loc
-                  | None -> Loc.ghost
+                  (get_prev_loc_only := true;
+                   let result =
+                     match Stream.peek strm with
+                     | Some
+                         ((_, { prev_loc = prev_loc; prev_loc_only = true }))
+                         -> (Stream.junk strm; prev_loc)
+                     | Some
+                         ((_, { prev_loc = prev_loc; prev_loc_only = false }))
+                         -> prev_loc
+                     | None -> Loc.ghost
+                   in (get_prev_loc_only := false; result))
                   
                 let is_level_labelled n lev =
                   match lev.lname with | Some n1 -> n = n1 | None -> false
Index: camlp4/boot/camlp4boot.ml
===================================================================
--- camlp4/boot/camlp4boot.ml	(revision 10933)
+++ camlp4/boot/camlp4boot.ml	(revision 10934)
@@ -1406,8 +1406,17 @@
                              (fun _ (sg : 'sig_items) _ (_loc : Gram.Loc.t)
                                 -> (Ast.MtSig (_loc, sg) : 'module_type)))) ]);
                       ((Some "simple"), None,
-                       [ ([ Gram.Skeyword "("; Gram.Sself; Gram.Skeyword ")" ],
+                       [ ([ Gram.Skeyword "module"; Gram.Skeyword "type";
+                            Gram.Skeyword "of";
+                            Gram.Snterm
+                              (Gram.Entry.obj
+                                 (module_expr : 'module_expr Gram.Entry.t)) ],
                           (Gram.Action.mk
+                             (fun (me : 'module_expr) _ _ _
+                                (_loc : Gram.Loc.t) ->
+                                (Ast.MtOf (_loc, me) : 'module_type))));
+                         ([ Gram.Skeyword "("; Gram.Sself; Gram.Skeyword ")" ],
+                          (Gram.Action.mk
                              (fun _ (mt : 'module_type) _ (_loc : Gram.Loc.t)
                                 -> (mt : 'module_type))));
                          ([ Gram.Skeyword "'";
